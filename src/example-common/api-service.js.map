{"version":3,"sources":["example-common/api-service.ts"],"names":["login","logout","makeInitialRequest","mockRequest","customErrorHandler"],"mappings":"AAAA,kDAAkD;AAElD,IAAI,UAAU,GAAG;IACf,KAAK;QACHA,MAAMA,CAACA,WAAWA,CAACA,gBAAgBA,EAAEA,CAACA,CAACA,CAAAA;IACzCA,CAACA;IAED,MAAM;QACJC,MAAMA,CAACA,WAAWA,CAACA,QAAQA,EAAEA,CAACA,CAACA,CAAAA;IACjCA,CAACA;IAED,kBAAkB;QAChBC,8EAA8EA;QAC9EA,gFAAgFA;QAChFA,iCAAiCA;QACjCA,MAAMA,CAACA,IAAIA,OAAOA,CAACA,UAACA,OAAOA,EAAEA,MAAMA;YACjCA,+CAA+CA;YAC/CA,MAAMA,CAACA,WAAWA,CAACA,iBAAiBA,EAAEA,GAAGA,CAACA;iBACvCA,IAAIA,CAACA,UAACA,IAAIA;gBACTA,OAAOA,CAACA,IAAIA,CAACA,CAAAA;YACfA,CAACA,CAACA;iBACDA,KAAKA,CAACA,UAACA,GAAGA;gBACTA,kBAAkBA,CAACA,GAAGA,CAACA,CAAAA;gBACvBA,MAAMA,CAACA,GAAGA,CAACA,CAAAA;YACbA,CAACA,CAACA,CAAAA;QACNA,CAACA,CAACA,CAAAA;IAEJA,CAACA;CACF,CAAA;AAED,qBAAsB,WAAW,EAAE,OAAO;IACxCC,MAAMA,CAACA,IAAIA,OAAOA,CAACA,UAACA,OAAOA,EAAEA,MAAMA;QACjCA,UAAUA,CAACA;YACTA,EAAEA,CAACA,CAACA,OAAOA,CAACA,WAAWA,GAAGA,WAAWA,CAACA,CAACA,CAACA,CAACA;gBACvCA,OAAOA,CAACA;oBACNA,IAAIA,EAAEA;wBACJA,MAAMA,CAACA,EAAEA,QAAQA,EAAEA,KAAKA,EAAEA,CAAAA;oBAC5BA,CAACA;iBACFA,CAACA,CAAAA;YACJA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACNA,MAAMA,CAACA,WAAWA,GAAGA,SAASA,CAACA,CAAAA;YACjCA,CAACA;QACHA,CAACA,EAAEA,OAAOA,CAACA,CAAAA;IACbA,CAACA,CAACA,CAAAA;AACJA,CAACA;AAED,4BAA6B,GAAG;IAC9BC,OAAOA,CAACA,GAAGA,CAACA,mCAAmCA,EAAEA,GAAGA,CAACA,CAAAA;AACvDA,CAACA;AAED;kBAAe,UAAU,CAAA","file":"example-common/api-service.js","sourcesContent":["// Simple example of an authentication API service\n\nlet apiService = {\n  login () {\n    return mockRequest('Authentication', 0)\n  },\n\n  logout () {\n    return mockRequest('Logout', 0)\n  },\n\n  makeInitialRequest () {\n    // Here's an example of how to handle errors in the apiService. Since coAuther\n    // needs to get the error in the .catch() it's necessary to create a new promise\n    // and \"rethrow\" the error again.\n    return new Promise((resolve, reject) => {\n      // Some timeout just to show the loading route.\n      return mockRequest('Initial request', 500)\n        .then((data) => {\n          resolve(data)\n        })\n        .catch((err) => {\n          customErrorHandler(err)\n          reject(err)\n        })\n    })\n\n  }\n}\n\nfunction mockRequest (requestType, timeout) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (confirm(requestType + ' success?')) {\n        resolve({\n          json: () => {\n            return { authData: 'yep' }\n          }\n        })\n      } else {\n        reject(requestType + ' failed')\n      }\n    }, timeout)\n  })\n}\n\nfunction customErrorHandler (err) {\n  console.log('do amazing stuff with this error:', err)\n}\n\nexport default apiService"],"sourceRoot":"/source/"}