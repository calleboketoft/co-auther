// Simple example of an authentication API service
var apiService = {
    login: function () {
        return mockRequest('Authentication', 0);
    },
    logout: function () {
        return mockRequest('Logout', 0);
    },
    makeInitialRequest: function () {
        // Here's an example of how to handle errors in the apiService. Since coAuther
        // needs to get the error in the .catch() it's necessary to create a new promise
        // and "rethrow" the error again.
        return new Promise(function (resolve, reject) {
            // Some timeout just to show the loading route.
            return mockRequest('Initial request', 500)
                .then(function (data) {
                resolve(data);
            })
                .catch(function (err) {
                customErrorHandler(err);
                reject(err);
            });
        });
    }
};
function mockRequest(requestType, timeout) {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            if (confirm(requestType + ' success?')) {
                resolve({
                    json: function () {
                        return { authData: 'yep' };
                    }
                });
            }
            else {
                reject(requestType + ' failed');
            }
        }, timeout);
    });
}
function customErrorHandler(err) {
    console.log('do amazing stuff with this error:', err);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = apiService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUtY29tbW9uL2FwaS1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbImxvZ2luIiwibG9nb3V0IiwibWFrZUluaXRpYWxSZXF1ZXN0IiwibW9ja1JlcXVlc3QiLCJjdXN0b21FcnJvckhhbmRsZXIiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUVsRCxJQUFJLFVBQVUsR0FBRztJQUNmLEtBQUs7UUFDSEEsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFBQTtJQUN6Q0EsQ0FBQ0E7SUFFRCxNQUFNO1FBQ0pDLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLENBQUNBLENBQUFBO0lBQ2pDQSxDQUFDQTtJQUVELGtCQUFrQjtRQUNoQkMsOEVBQThFQTtRQUM5RUEsZ0ZBQWdGQTtRQUNoRkEsaUNBQWlDQTtRQUNqQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0EsVUFBQ0EsT0FBT0EsRUFBRUEsTUFBTUE7WUFDakNBLCtDQUErQ0E7WUFDL0NBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLGlCQUFpQkEsRUFBRUEsR0FBR0EsQ0FBQ0E7aUJBQ3ZDQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtnQkFDVEEsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQUE7WUFDZkEsQ0FBQ0EsQ0FBQ0E7aUJBQ0RBLEtBQUtBLENBQUNBLFVBQUNBLEdBQUdBO2dCQUNUQSxrQkFBa0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUFBO2dCQUN2QkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQUE7WUFDYkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDTkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7SUFFSkEsQ0FBQ0E7Q0FDRixDQUFBO0FBRUQscUJBQXNCLFdBQVcsRUFBRSxPQUFPO0lBQ3hDQyxNQUFNQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQSxFQUFFQSxNQUFNQTtRQUNqQ0EsVUFBVUEsQ0FBQ0E7WUFDVEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0EsR0FBR0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZDQSxPQUFPQSxDQUFDQTtvQkFDTkEsSUFBSUEsRUFBRUE7d0JBQ0pBLE1BQU1BLENBQUNBLEVBQUVBLFFBQVFBLEVBQUVBLEtBQUtBLEVBQUVBLENBQUFBO29CQUM1QkEsQ0FBQ0E7aUJBQ0ZBLENBQUNBLENBQUFBO1lBQ0pBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxXQUFXQSxHQUFHQSxTQUFTQSxDQUFDQSxDQUFBQTtZQUNqQ0EsQ0FBQ0E7UUFDSEEsQ0FBQ0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQUE7SUFDYkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7QUFDSkEsQ0FBQ0E7QUFFRCw0QkFBNkIsR0FBRztJQUM5QkMsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsbUNBQW1DQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFBQTtBQUN2REEsQ0FBQ0E7QUFFRDtrQkFBZSxVQUFVLENBQUEiLCJmaWxlIjoiZXhhbXBsZS1jb21tb24vYXBpLXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaW1wbGUgZXhhbXBsZSBvZiBhbiBhdXRoZW50aWNhdGlvbiBBUEkgc2VydmljZVxuXG5sZXQgYXBpU2VydmljZSA9IHtcbiAgbG9naW4gKCkge1xuICAgIHJldHVybiBtb2NrUmVxdWVzdCgnQXV0aGVudGljYXRpb24nLCAwKVxuICB9LFxuXG4gIGxvZ291dCAoKSB7XG4gICAgcmV0dXJuIG1vY2tSZXF1ZXN0KCdMb2dvdXQnLCAwKVxuICB9LFxuXG4gIG1ha2VJbml0aWFsUmVxdWVzdCAoKSB7XG4gICAgLy8gSGVyZSdzIGFuIGV4YW1wbGUgb2YgaG93IHRvIGhhbmRsZSBlcnJvcnMgaW4gdGhlIGFwaVNlcnZpY2UuIFNpbmNlIGNvQXV0aGVyXG4gICAgLy8gbmVlZHMgdG8gZ2V0IHRoZSBlcnJvciBpbiB0aGUgLmNhdGNoKCkgaXQncyBuZWNlc3NhcnkgdG8gY3JlYXRlIGEgbmV3IHByb21pc2VcbiAgICAvLyBhbmQgXCJyZXRocm93XCIgdGhlIGVycm9yIGFnYWluLlxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBTb21lIHRpbWVvdXQganVzdCB0byBzaG93IHRoZSBsb2FkaW5nIHJvdXRlLlxuICAgICAgcmV0dXJuIG1vY2tSZXF1ZXN0KCdJbml0aWFsIHJlcXVlc3QnLCA1MDApXG4gICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIGN1c3RvbUVycm9ySGFuZGxlcihlcnIpXG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSlcbiAgICB9KVxuXG4gIH1cbn1cblxuZnVuY3Rpb24gbW9ja1JlcXVlc3QgKHJlcXVlc3RUeXBlLCB0aW1lb3V0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29uZmlybShyZXF1ZXN0VHlwZSArICcgc3VjY2Vzcz8nKSkge1xuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICBqc29uOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyBhdXRoRGF0YTogJ3llcCcgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChyZXF1ZXN0VHlwZSArICcgZmFpbGVkJylcbiAgICAgIH1cbiAgICB9LCB0aW1lb3V0KVxuICB9KVxufVxuXG5mdW5jdGlvbiBjdXN0b21FcnJvckhhbmRsZXIgKGVycikge1xuICBjb25zb2xlLmxvZygnZG8gYW1hemluZyBzdHVmZiB3aXRoIHRoaXMgZXJyb3I6JywgZXJyKVxufVxuXG5leHBvcnQgZGVmYXVsdCBhcGlTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIvbm9kZV9tb2R1bGVzIn0=
